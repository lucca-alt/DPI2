#!/bin/bash
# Start script with: ./chat.sh <init, post, show, connect> <args>

# Makes the script stop on errors
set -e

#######################################
# Creates a git repo and a git user,
# commits an inital message
# Arguments:
#   name of the user
#######################################
init() {
  name=$1
  # TODO: implement function
  repoDir="$name"

  mkdir "$repoDir"
  cd "$repoDir"

  git init -b "$name"

  emptyTree=$(echo -n ""| git mktree)

  commitMsg="$name joined"
  commitHash=$(echo "$commitMsg" | git commit-tree "$emptyTree")

  git update-ref refs/heads/"$name" "$commitHash"

  git symbolic-ref HEAD refs/heads/"$name"
}

#######################################
# Fetches from all remotes, commits an empty
# tree with a user commit message and pushes to all remotes
# Arguments:
#   The message to be sent
#######################################
post() {
  message=$1
  # TODO: implement function
  if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
	  for dir in */; do
		  if [ -d "$dir/.git" ]; then
			  cd "$dir"
			  break
		  fi
	  done
  fi


  git fetch --all

  branch=$(git symbolic-ref --short HEAD)

  parents=$(git for-each-ref --format='%(refname:short)' refs/remotes/ | while read ref; do
  git rev-parse "$ref"
done)

  current_head=$(git rev-parse HEAD)
  parents="$parents $current_head"

  empty_tree=$(echo -n "" | git mktree)

  parent_args=""
  for parent in $parents; do
	  parent_args="$parent_args -p $parent"
  done

  new_commit=$(echo "$message" | git commit-tree $empty_tree $parent_args)

  git update-ref "refs/heads/$branch" "$new_commit"
}

#######################################
# Pushes local branch to the remote repositories
#######################################
push() {
  # TODO: implement function
  if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    for dir in */; do
      if [ -d "$dir/.git" ]; then
        cd "$dir"
        break
      fi
    done
  fi

  
  branch=$(git symbolic-ref --short HEAD)

  # Loop over all remotes and push current branch
  for remote in $(git remote); do
    git push "$remote" "$branch"
  done
}
#######################################
# Prints the git log history in a pretty format
#######################################
show() {
  # TODO: implement function
  # pass
  : 
}

#######################################
# Tracks the remote branch in the local repository
# Arguments:
#  The remote branch path
#######################################
connect() {
  remote_repo=$1
  # TODO: implement function
 
  if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    for dir in */; do
      if [ -d "$dir/.git" ] && [ "$dir" != "$(basename "$remote_repo")/" ]; then
        cd "$dir"
        break
      fi
    done
  fi

  
  if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    echo "No Git repository found to add remote to."
    exit 1
  fi

  remote_name=$(basename "$remote_repo")
  git remote add "$remote_name" "$remote_repo"
}

f_call=$1
shift
$f_call "$@"
